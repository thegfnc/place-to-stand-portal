-- Enable required extensions
create extension if not exists "uuid-ossp";
create extension if not exists pgcrypto;

-- Timestamp helper to maintain updated_at columns
create or replace function public.set_updated_at()
returns trigger as $$
begin
	new.updated_at = timezone('utc', now());
	return new;
end;
$$ language plpgsql;

-- Enums
create type public.user_role as enum ('ADMIN', 'CONTRACTOR', 'CLIENT');
create type public.task_status as enum (
	'BACKLOG',
	'ON_DECK',
	'IN_PROGRESS',
	'IN_REVIEW',
	'BLOCKED',
	'DONE',
	'ARCHIVED'
);
create type public.task_priority as enum ('LOW', 'MEDIUM', 'HIGH');
create type public.hour_block_type as enum ('RETAINER', 'PROJECT', 'MAINTENANCE');
create type public.member_role as enum ('OWNER', 'CONTRIBUTOR', 'VIEWER');

-- Users table mirrors auth.users but tracks role metadata
create table public.users (
	id uuid primary key references auth.users (id) on delete cascade,
	email text not null unique,
	full_name text,
	role public.user_role not null default 'CLIENT',
	avatar_url text,
	created_at timestamptz not null default timezone('utc', now()),
	updated_at timestamptz not null default timezone('utc', now()),
	deleted_at timestamptz
);

create trigger users_set_updated_at
before update on public.users
for each row
execute function public.set_updated_at();

-- Clients
create table public.clients (
	id uuid primary key default gen_random_uuid(),
	name text not null,
	slug text unique,
	notes text,
	created_by uuid references public.users (id),
	created_at timestamptz not null default timezone('utc', now()),
	updated_at timestamptz not null default timezone('utc', now()),
	deleted_at timestamptz
);

create trigger clients_set_updated_at
before update on public.clients
for each row
execute function public.set_updated_at();

-- Projects
create table public.projects (
	id uuid primary key default gen_random_uuid(),
	client_id uuid not null references public.clients (id),
	name text not null,
	code text,
	description text,
	status text not null default 'ACTIVE',
	starts_on date,
	ends_on date,
	created_by uuid references public.users (id),
	created_at timestamptz not null default timezone('utc', now()),
	updated_at timestamptz not null default timezone('utc', now()),
	deleted_at timestamptz
);

create trigger projects_set_updated_at
before update on public.projects
for each row
execute function public.set_updated_at();

-- Project membership (controls contractor/client access)
create table public.project_members (
	id bigint generated by default as identity primary key,
	project_id uuid not null references public.projects (id) on delete cascade,
	user_id uuid not null references public.users (id) on delete cascade,
	role public.member_role not null default 'CONTRIBUTOR',
	created_at timestamptz not null default timezone('utc', now()),
	deleted_at timestamptz,
	unique (project_id, user_id)
);

-- Tasks
create table public.tasks (
	id uuid primary key default gen_random_uuid(),
	project_id uuid not null references public.projects (id) on delete cascade,
	title text not null,
	description text,
	status public.task_status not null default 'BACKLOG',
	priority public.task_priority not null default 'MEDIUM',
	due_on date,
	created_by uuid references public.users (id),
	updated_by uuid references public.users (id),
	created_at timestamptz not null default timezone('utc', now()),
	updated_at timestamptz not null default timezone('utc', now()),
	deleted_at timestamptz
);

create trigger tasks_set_updated_at
before update on public.tasks
for each row
execute function public.set_updated_at();

-- Task assignments (allows multiple assignees)
create table public.task_assignees (
	id bigint generated by default as identity primary key,
	task_id uuid not null references public.tasks (id) on delete cascade,
	user_id uuid not null references public.users (id) on delete cascade,
	created_at timestamptz not null default timezone('utc', now()),
	deleted_at timestamptz,
	unique (task_id, user_id)
);

-- Hour blocks purchased for projects
create table public.hour_blocks (
	id uuid primary key default gen_random_uuid(),
	project_id uuid not null references public.projects (id) on delete cascade,
	title text not null,
	block_type public.hour_block_type not null default 'PROJECT',
	hours_purchased numeric(6,2) not null,
	hours_consumed numeric(6,2) not null default 0,
	notes text,
	starts_on date,
	ends_on date,
	created_by uuid references public.users (id),
	created_at timestamptz not null default timezone('utc', now()),
	updated_at timestamptz not null default timezone('utc', now()),
	deleted_at timestamptz
);

create trigger hour_blocks_set_updated_at
before update on public.hour_blocks
for each row
execute function public.set_updated_at();

-- Indexes to speed up lookups
create index idx_clients_deleted_at on public.clients (deleted_at);
create index idx_projects_client on public.projects (client_id) where deleted_at is null;
create index idx_projects_deleted_at on public.projects (deleted_at);
create index idx_project_members_user on public.project_members (user_id) where deleted_at is null;
create index idx_tasks_project on public.tasks (project_id) where deleted_at is null;
create index idx_tasks_status on public.tasks (status) where deleted_at is null;
create index idx_task_assignees_user on public.task_assignees (user_id) where deleted_at is null;
create index idx_hour_blocks_project on public.hour_blocks (project_id) where deleted_at is null;

-- Row Level Security configuration
alter table public.users enable row level security;
alter table public.clients enable row level security;
alter table public.projects enable row level security;
alter table public.project_members enable row level security;
alter table public.tasks enable row level security;
alter table public.task_assignees enable row level security;
alter table public.hour_blocks enable row level security;

-- Helper policy predicates
create or replace view public.current_user_with_role as
select u.id, u.role
from public.users u
where u.id = auth.uid() and u.deleted_at is null;

create or replace function public.is_admin()
returns boolean as $$
	select exists (
		select 1 from public.users
		where id = auth.uid()
			and deleted_at is null
			and role = 'ADMIN'
	);
$$ language sql stable;

-- Users policies
create policy "Users can view themselves" on public.users
for select using (auth.uid() = id and deleted_at is null);

create policy "Admins manage users" on public.users
using (public.is_admin()) with check (public.is_admin());

-- Clients policies
create policy "Admins full access to clients" on public.clients
using (public.is_admin()) with check (public.is_admin());

create policy "Members read clients" on public.clients
for select using (
	exists (
		select 1
		from public.projects p
		join public.project_members pm on pm.project_id = p.id and pm.deleted_at is null
		where p.client_id = clients.id
			and p.deleted_at is null
			and pm.user_id = auth.uid()
	)
	and deleted_at is null
);

-- Projects policies
create policy "Admins full access to projects" on public.projects
using (public.is_admin()) with check (public.is_admin());

create policy "Members read projects" on public.projects
for select using (
	exists (
		select 1 from public.project_members pm
		where pm.project_id = projects.id
			and pm.user_id = auth.uid()
			and pm.deleted_at is null
	)
	and deleted_at is null
);

create policy "Members update their projects" on public.projects
for update using (
	public.is_admin() or exists (
		select 1 from public.project_members pm
		where pm.project_id = projects.id
			and pm.user_id = auth.uid()
			and pm.deleted_at is null
			and pm.role in ('OWNER', 'CONTRIBUTOR')
	)
);

-- Project members policies
create policy "Admins manage project members" on public.project_members
using (public.is_admin()) with check (public.is_admin());

create policy "Members view project members" on public.project_members
for select using (
	exists (
		select 1 from public.project_members pm
		where pm.project_id = project_members.project_id
			and pm.user_id = auth.uid()
			and pm.deleted_at is null
	)
	and deleted_at is null
);

-- Tasks policies
create policy "Admins full access to tasks" on public.tasks
using (public.is_admin()) with check (public.is_admin());

create policy "Project members manage tasks" on public.tasks
using (
	exists (
		select 1 from public.project_members pm
		where pm.project_id = tasks.project_id
			and pm.user_id = auth.uid()
			and pm.deleted_at is null
	)
	and deleted_at is null
) with check (
	exists (
		select 1 from public.project_members pm
		where pm.project_id = tasks.project_id
			and pm.user_id = auth.uid()
			and pm.deleted_at is null
			and pm.role in ('OWNER', 'CONTRIBUTOR')
	)
);

-- Task assignees policies
create policy "Admins manage task assignees" on public.task_assignees
using (public.is_admin()) with check (public.is_admin());

create policy "Members view task assignees" on public.task_assignees
for select using (
	exists (
		select 1 from public.tasks t
		where t.id = task_assignees.task_id
			and t.deleted_at is null
			and exists (
				select 1 from public.project_members pm
				where pm.project_id = t.project_id
					and pm.user_id = auth.uid()
					and pm.deleted_at is null
			)
	)
	and deleted_at is null
);

-- Hour blocks policies
create policy "Admins manage hour blocks" on public.hour_blocks
using (public.is_admin()) with check (public.is_admin());

create policy "Members view hour blocks" on public.hour_blocks
for select using (
	exists (
		select 1 from public.project_members pm
		where pm.project_id = hour_blocks.project_id
			and pm.user_id = auth.uid()
			and pm.deleted_at is null
	)
	and deleted_at is null
);

